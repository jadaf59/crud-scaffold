"use client"

import * as React from "react"
import { useQueryState } from "nuqs"

import { dataTableConfig, type DataTableConfig } from "@/config/data-table"
import { cn } from "@/lib/utils"
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group"
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip"

type FeatureFlagValue = DataTableConfig["featureFlags"][number]["value"]

interface FeatureFlagsContextProps {
  featureFlags: FeatureFlagValue[]
  setFeatureFlags: (value: FeatureFlagValue[]) => void
}

const FeatureFlagsContext = React.createContext<FeatureFlagsContextProps>({
  featureFlags: [],
  setFeatureFlags: () => {},
})

export function useFeatureFlags() {
  const context = React.useContext(FeatureFlagsContext)

  if (!context) {
    throw new Error("useFeatureFlags must be used within a FeatureFlagsProvider")
  }

  return context
}

interface FeatureFlagsProviderProps {
  children: React.ReactNode
  className?: string
}

export function FeatureFlagsProvider({
  children,
  className,
}: FeatureFlagsProviderProps) {
  const [featureFlags = [], setFeatureFlags] = useQueryState(
    "flags",
    {
      parse: (value: string) =>
        value.split(",").filter((flag): flag is FeatureFlagValue =>
          dataTableConfig.featureFlags.some((f) => f.value === flag)
        ),
      serialize: (value: FeatureFlagValue[]) => value.join(","),
    },
    {
      shallow: true,
    }
  )

  return (
    <FeatureFlagsContext.Provider
      value={{
        featureFlags,
        setFeatureFlags,
      }}
    >
      <div className={cn("mb-4 flex items-center gap-2", className)}>
        <ToggleGroup
          type="multiple"
          value={featureFlags}
          onValueChange={setFeatureFlags}
          className="flex-wrap justify-start"
        >
          {dataTableConfig.featureFlags.map((flag) => (
            <Tooltip key={flag.value}>
              <ToggleGroupItem
                value={flag.value}
                size="sm"
                className="gap-2 whitespace-nowrap"
                asChild
              >
                <TooltipTrigger>
                  <flag.icon className="size-3.5 shrink-0" aria-hidden="true" />
                  {flag.label}
                </TooltipTrigger>
              </ToggleGroupItem>
              <TooltipContent
                align="start"
                side="bottom"
                sideOffset={6}
                className="flex max-w-60 flex-col space-y-1.5 border bg-background py-2 font-semibold text-foreground"
              >
                <div>{flag.tooltipTitle}</div>
                <div className="text-xs text-muted-foreground">
                  {flag.tooltipDescription}
                </div>
              </TooltipContent>
            </Tooltip>
          ))}
        </ToggleGroup>
      </div>
      {children}
    </FeatureFlagsContext.Provider>
  )
}