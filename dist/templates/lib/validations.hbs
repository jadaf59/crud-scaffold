{{#if (eq entity.sourceFile "schema")}}
import { {{lowercase entity.pluralName}}, type {{entity.name}} } from "@/lib/db/schema/schema"
{{else}}
import { {{lowercase entity.pluralName}}, type {{entity.name}} } from "@/lib/db/schema/{{entity.sourceFile}}"
{{/if}}
import {
  createSearchParamsCache,
  parseAsArrayOf,
  parseAsInteger,
  parseAsString,
  parseAsStringEnum,
} from "nuqs/server"
import * as z from "zod"

import { getFiltersStateParser, getSortingStateParser } from "@/lib/parsers"

export const searchParamsCache = createSearchParamsCache({
  flags: parseAsArrayOf(z.enum(["advancedTable", "floatingBar"])).withDefault([]),
  page: parseAsInteger.withDefault(1),
  perPage: parseAsInteger.withDefault(10),
  sort: getSortingStateParser<{{entity.name}}>().withDefault([
    { id: "createdAt", desc: true },
  ]),
  {{#each entity.fields}}
  {{#if isSearchable}}
  {{#if isEnum}}
  {{name}}: parseAsArrayOf(z.enum({{lowercase ../entity.pluralName}}.{{name}}.enumValues)).withDefault([]),
  {{else}}
  {{name}}: parseAsString.withDefault(""),
  {{/if}}
  {{/if}}
  {{/each}}
  from: parseAsString.withDefault(""),
  to: parseAsString.withDefault(""),
  // advanced filter
  filters: getFiltersStateParser().withDefault([]),
  joinOperator: parseAsStringEnum(["and", "or"]).withDefault("and"),
})

export const create{{entity.name}}Schema = z.object({
  {{#each entity.fields}}
  {{#if (ne name "id")}}
  {{#if (ne name "createdAt")}}
  {{#if (ne name "updatedAt")}}
  {{#if isEnum}}
  {{name}}: z.enum({{lowercase ../entity.pluralName}}.{{name}}.enumValues),
  {{else if (eq type "Date")}}
  {{name}}: z.date(),
  {{else}}
  {{name}}: z.{{lowercase type}}(),
  {{/if}}
  {{/if}}
  {{/if}}
  {{/if}}
  {{/each}}
})

export const update{{entity.name}}Schema = z.object({
  {{#each entity.fields}}
  {{#if (ne name "id")}}
  {{#if (ne name "createdAt")}}
  {{#if (ne name "updatedAt")}}
  {{#if isEnum}}
  {{name}}: z.enum({{lowercase ../entity.pluralName}}.{{name}}.enumValues).optional(),
  {{else if (eq type "Date")}}
  {{name}}: z.date().optional(),
  {{else}}
  {{name}}: z.{{lowercase type}}().optional(),
  {{/if}}
  {{/if}}
  {{/if}}
  {{/if}}
  {{/each}}
})

export const {{entity.name}}Schema = z.object({
  {{#each entity.fields}}
  {{#if isEnum}}
  {{name}}: z.enum({{lowercase ../entity.pluralName}}.{{name}}.enumValues),
  {{else if (eq type "Date")}}
  {{name}}: z.date(),
  {{else}}
  {{name}}: z.{{lowercase type}}(),
  {{/if}}
  {{/each}}
})

export type Get{{pascalCase entity.pluralName}}Schema = Awaited<ReturnType<typeof searchParamsCache.parse>>
export type Create{{entity.name}}Schema = z.infer<typeof create{{entity.name}}Schema>
export type Update{{entity.name}}Schema = z.infer<typeof update{{entity.name}}Schema>

// Custom validation messages
export const {{uppercase entity.name}}_VALIDATION_MESSAGES = {
  {{#each entity.fields}}
  {{#unless (eq name "id")}}
  {{#unless (eq name "createdAt")}}
  {{name}}: {
    {{#if (eq type "string")}}
    required: "{{pascalCase name}} is required",
    min: "{{pascalCase name}} must be at least 1 character",
    max: "{{pascalCase name}} must be less than 255 characters",
    {{else if isEnum}}
    required: "{{pascalCase name}} is required",
    invalid: "{{pascalCase name}} must be a valid option",
    {{else if (eq type "number")}}
    required: "{{pascalCase name}} is required",
    invalid: "{{pascalCase name}} must be a valid number",
    {{else if (eq type "boolean")}}
    required: "{{pascalCase name}} is required",
    invalid: "{{pascalCase name}} must be true or false",
    {{else if (eq type "Date")}}
    required: "{{pascalCase name}} is required",
    invalid: "{{pascalCase name}} must be a valid date",
    {{/if}}
  },
  {{/unless}}
  {{/unless}}
  {{/each}}
} as const

// Type guard
export function is{{entity.name}}(value: unknown): value is {{entity.name}} {
  try {
    return create{{entity.name}}Schema.safeParse(value).success
  } catch {
    return false
  }
}

// Validation error formatter
export function format{{entity.name}}ValidationErrors(errors: z.ZodError) {
  return errors.errors.map((error) => {
    const field = error.path.join(".")
    const message = {{uppercase entity.name}}_VALIDATION_MESSAGES[field as keyof typeof {{uppercase entity.name}}_VALIDATION_MESSAGES]?.[
      error.code.toLowerCase() as keyof (typeof {{uppercase entity.name}}_VALIDATION_MESSAGES)[keyof typeof {{uppercase entity.name}}_VALIDATION_MESSAGES]
    ] || error.message
    return { field, message }
  })
}