import { type {{entity.name}} } from "@/lib/db/schema/schema"
import {
  AlertCircle,
  AlertTriangle,
  ArrowDown,
  ArrowRight,
  ArrowUp,
  CheckCircle2,
  Circle,
  HelpCircle,
  type LucideIcon,
  Timer,
  XCircle,
} from "lucide-react"

{{#each entity.fields}}
{{#if isEnum}}
export function get{{pascalCase name}}Icon({{name}}: {{../entity.name}}["{{name}}"]): LucideIcon {
  switch ({{name}}) {
    {{#each ../entity.enums}}
    {{#if (eq name ../name)}}
    {{#each values}}
    case "{{this}}":
      return {{lookup (lookup ../../enumIcons ../name) this}}
    {{/each}}
    {{/if}}
    {{/each}}
    default:
      return HelpCircle
  }
}

export function get{{pascalCase name}}Color({{name}}: {{../entity.name}}["{{name}}"]) {
  switch ({{name}}) {
    {{#each ../entity.enums}}
    {{#if (eq name ../name)}}
    {{#each values}}
    case "{{this}}":
      return "{{lookup (lookup ../../enumColors ../name) this}}"
    {{/each}}
    {{/if}}
    {{/each}}
    default:
      return "gray"
  }
}

{{/if}}
{{/each}}

export function format{{entity.name}}ForDisplay({{lowercase entity.name}}: {{entity.name}}) {
  return {
    ...{{lowercase entity.name}},
    {{#each entity.fields}}
    {{#if (eq type "Date")}}
    {{name}}: formatDate({{lowercase ../entity.name}}.{{name}}),
    {{/if}}
    {{/each}}
  }
}

// Helper function to get the sort direction icon
export function getSortDirectionIcon(direction: "asc" | "desc" | undefined) {
  switch (direction) {
    case "asc":
      return ArrowUp
    case "desc":
      return ArrowDown
    default:
      return ArrowRight
  }
}

// Helper function to format numbers with commas
export function formatNumber(num: number) {
  return new Intl.NumberFormat().format(num)
}

// Helper function to format dates
export function formatDate(date: Date) {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
  }).format(new Date(date))
}

// Helper function to format relative time
export function formatRelativeTime(date: Date) {
  const now = new Date()
  const diff = now.getTime() - new Date(date).getTime()
  const seconds = Math.floor(diff / 1000)
  const minutes = Math.floor(seconds / 60)
  const hours = Math.floor(minutes / 60)
  const days = Math.floor(hours / 24)

  if (days > 7) {
    return formatDate(date)
  } else if (days > 0) {
    return `${days}d ago`
  } else if (hours > 0) {
    return `${hours}h ago`
  } else if (minutes > 0) {
    return `${minutes}m ago`
  } else {
    return "just now"
  }
}

// Helper function to truncate text
export function truncateText(text: string, length: number) {
  if (text.length <= length) return text
  return `${text.slice(0, length)}...`
}

// Helper function to generate placeholder text
export function generatePlaceholder(field: string) {
  return `Enter ${field.toLowerCase()}...`
}

// Helper function to format file size
export function formatFileSize(bytes: number) {
  const units = ["B", "KB", "MB", "GB", "TB"]
  let size = bytes
  let unitIndex = 0

  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024
    unitIndex++
  }

  return `${size.toFixed(1)} ${units[unitIndex]}`
}

// Helper function to format currency
export function formatCurrency(amount: number, currency = "USD") {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency,
  }).format(amount)
}

// Helper function to format percentage
export function formatPercentage(value: number, decimals = 1) {
  return `${value.toFixed(decimals)}%`
}

// Helper function to generate a random color
export function generateRandomColor() {
  return `#${Math.floor(Math.random() * 16777215).toString(16)}`
}

// Helper function to calculate contrast color
export function getContrastColor(hexcolor: string) {
  const r = parseInt(hexcolor.slice(1, 3), 16)
  const g = parseInt(hexcolor.slice(3, 5), 16)
  const b = parseInt(hexcolor.slice(5, 7), 16)
  const yiq = (r * 299 + g * 587 + b * 114) / 1000
  return yiq >= 128 ? "#000000" : "#FFFFFF"
}

// Helper function to debounce function calls
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout

  return function executedFunction(...args: Parameters<T>) {
    const later = () => {
      clearTimeout(timeout)
      func(...args)
    }

    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

// Helper function to throttle function calls
export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean
  
  return function executedFunction(...args: Parameters<T>) {
    if (!inThrottle) {
      func(...args)
      inThrottle = true
      setTimeout(() => (inThrottle = false), limit)
    }
  }
}

// Generated utilities for {{entity.name}}

export function format{{entity.name}}Data(data: any) {
  return {
    {{#each entity.fields}}
    {{name}}: data.{{name}},
    {{/each}}
  }
}