"use client"

import * as React from "react"
import { type {{entity.name}} } from "@/lib/db/schema/{{lowercase entity.pluralName}}"
import type {
  DataTableAdvancedFilterField,
  DataTableFilterField,
  DataTableRowAction,
} from "@/types"

import { useDataTable } from "@/hooks/use-data-table"
import { DataTable } from "@/components/data-table/data-table"
import { DataTableAdvancedToolbar } from "@/components/data-table/data-table-advanced-toolbar"
import { DataTableToolbar } from "@/components/data-table/data-table-toolbar"

import { type get{{entity.pluralName}} } from "@/app/_lib/{{lowercase entity.pluralName}}/queries"
{{#if entity.hasIcons}}
import { {{#each entity.fields}}{{#if isEnum}}get{{pascalCase name}}Icon,{{/if}}{{/each}} } from "@/app/_lib/{{lowercase entity.pluralName}}/utils"
{{/if}}
import { Delete{{entity.name}}Dialog } from "./delete-{{lowercase entity.name}}-dialog"
import { useFeatureFlags } from "./feature-flags-provider"
import { getColumns } from "./{{lowercase entity.pluralName}}-table-columns"
import { {{entity.name}}TableFloatingBar } from "./{{lowercase entity.pluralName}}-table-floating-bar"
import { {{entity.name}}TableToolbarActions } from "./{{lowercase entity.pluralName}}-table-toolbar-actions"
import { Update{{entity.name}}Sheet } from "./update-{{lowercase entity.name}}-sheet"

interface {{entity.pluralName}}TableProps {
  promises: Promise<[
    Awaited<ReturnType<typeof get{{entity.pluralName}}>>,
    {{#each entity.fields}}
    {{#if isEnum}}
    Awaited<ReturnType<typeof get{{pascalCase ../entity.name}}{{pascalCase name}}Counts>>,
    {{/if}}
    {{/each}}
  ]>
}

/**
 * This component can render either a faceted filter or a search filter based on the `options` prop.
 *
 * @prop options - An array of objects, each representing a filter option. If provided, a faceted filter is rendered. If not, a search filter is rendered.
 *
 * Each `option` object has the following properties:
 * @prop {string} label - The label for the filter option.
 * @prop {string} value - The value for the filter option.
 * @prop {React.ReactNode} [icon] - An optional icon to display next to the label.
 * @prop {boolean} [withCount] - An optional boolean to display the count of the filter option.
 */
const filterFields: DataTableFilterField<{{entity.name}}>[] = [
  {{#each entity.fields}}
  {{#if isSearchable}}
  {{#if isEnum}}
  {
    id: "{{name}}",
    label: "{{pascalCase name}}",
    options: {{../entity.name}}.{{name}}.enumValues.map((value) => ({
      label: toSentenceCase(value),
      value: value,
      {{#if ../entity.hasIcons}}
      icon: get{{pascalCase name}}Icon(value),
      {{/if}}
      count: {{name}}Counts[value],
    })),
  },
  {{else}}
  {
    id: "{{name}}",
    label: "{{pascalCase name}}",
    placeholder: "Filter {{lowercase (pascalCase name)}}...",
  },
  {{/if}}
  {{/if}}
  {{/each}}
]

/**
 * Advanced filter fields for the data table.
 * These fields provide more complex filtering options compared to the regular filterFields.
 *
 * Key differences from regular filterFields:
 * 1. More field types: Includes 'text', 'multi-select', 'date', and 'boolean'.
 * 2. Enhanced flexibility: Allows for more precise and varied filtering options.
 * 3. Used with DataTableAdvancedToolbar: Enables a more sophisticated filtering UI.
 * 4. Date and boolean types: Adds support for filtering by date ranges and boolean values.
 */
const advancedFilterFields: DataTableAdvancedFilterField<{{entity.name}}>[] = [
  {{#each entity.fields}}
  {{#if isSearchable}}
  {{#if isEnum}}
  {
    id: "{{name}}",
    label: "{{pascalCase name}}",
    type: "multi-select",
    options: {{../entity.name}}.{{name}}.enumValues.map((value) => ({
      label: toSentenceCase(value),
      value: value,
      {{#if ../entity.hasIcons}}
      icon: get{{pascalCase name}}Icon(value),
      {{/if}}
      count: {{name}}Counts[value],
    })),
  },
  {{else if (eq type "date")}}
  {
    id: "{{name}}",
    label: "{{pascalCase name}}",
    type: "date",
  },
  {{else if (eq type "boolean")}}
  {
    id: "{{name}}",
    label: "{{pascalCase name}}",
    type: "boolean",
  },
  {{else}}
  {
    id: "{{name}}",
    label: "{{pascalCase name}}",
    type: "text",
  },
  {{/if}}
  {{/if}}
  {{/each}}
]

export function {{pascalCase entity.pluralName}}Table({ promises }: {{entity.pluralName}}TableProps) {
  const { featureFlags } = useFeatureFlags()
  const [
    { data, pageCount },
    {{#each entity.fields}}
    {{#if isEnum}}
    {{name}}Counts,
    {{/if}}
    {{/each}}
  ] = React.use(promises)
  const [rowAction, setRowAction] = React.useState<DataTableRowAction<{{entity.name}}> | null>(null)

  const columns = React.useMemo(
    () => getColumns({ setRowAction }),
    [setRowAction]
  )

  const enableAdvancedTable = featureFlags.includes("advancedTable")
  const enableFloatingBar = featureFlags.includes("floatingBar")

  const { table } = useDataTable({
    data,
    columns,
    pageCount,
    filterFields,
    enableAdvancedFilter: enableAdvancedTable,
    initialState: {
      sorting: [{ id: "createdAt", desc: true }],
      columnPinning: { right: ["actions"] },
    },
    getRowId: (originalRow) => originalRow.id,
    shallow: false,
    clearOnDefault: true,
  })

  return (
    <>
      <DataTable
        table={table}
        floatingBar={
          enableFloatingBar ? <{{entity.name}}TableFloatingBar table={table} /> : null
        }
      >
        {enableAdvancedTable ? (
          <DataTableAdvancedToolbar
            table={table}
            filterFields={advancedFilterFields}
            shallow={false}
          >
            <{{entity.name}}TableToolbarActions table={table} />
          </DataTableAdvancedToolbar>
        ) : (
          <DataTableToolbar table={table} filterFields={filterFields}>
            <{{entity.name}}TableToolbarActions table={table} />
          </DataTableToolbar>
        )}
      </DataTable>
      <Update{{entity.name}}Sheet
        open={rowAction?.type === "update"}
        onOpenChange={() => setRowAction(null)}
        {{lowercase entity.name}}={rowAction?.row.original ?? null}
      />
      <Delete{{entity.name}}Dialog
        open={rowAction?.type === "delete"}
        onOpenChange={() => setRowAction(null)}
        {{lowercase entity.pluralName}}={rowAction?.row.original ? [rowAction?.row.original] : []}
        showTrigger={false}
        onSuccess={() => rowAction?.row.toggleSelected(false)}
      />
    </>
  )
}