"use client"

import * as React from "react"
import { type {{entity.name}} } from "@/lib/db/schema/schema"
import { Loader, Trash } from "lucide-react"
import { toast } from "sonner"

import { useMediaQuery } from "@/hooks/use-media-query"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer"

import { delete{{entity.pluralName}} } from "@/app/_lib/{{entity.tableName}}/actions"

interface Delete{{entity.pluralName}}DialogProps {
  {{entity.tableName}}: {{entity.name}}[]
  open?: boolean
  onOpenChange?: (open: boolean) => void
  showTrigger?: boolean
  onSuccess?: () => void
}

export function Delete{{entity.pluralName}}Dialog({
  {{entity.tableName}},
  open,
  onOpenChange,
  showTrigger = true,
  onSuccess,
}: Delete{{entity.pluralName}}DialogProps) {
  const [isDeletePending, startDeleteTransition] = React.useTransition()
  const isDesktop = useMediaQuery("(min-width: 768px)")

  function onDelete() {
    startDeleteTransition(async () => {
      try {
        const result = await delete{{entity.pluralName}}({{entity.tableName}}.map((item) => item.id))

        if (result.error) {
          toast.error(result.error)
          return
        }

        toast.success("{{entity.pluralName}} deleted successfully")
        onSuccess?.()
        onOpenChange?.(false)
      } catch (err) {
        toast.error("Something went wrong")
      }
    })
  }

  if (isDesktop) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        {showTrigger ? (
          <DialogTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="h-8 px-2 lg:px-3"
            >
              <Trash className="size-4" aria-hidden="true" />
              <span className="sr-only">Delete</span>
            </Button>
          </DialogTrigger>
        ) : null}
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Are you absolutely sure?</DialogTitle>
            <DialogDescription>
              This action cannot be undone. This will permanently delete{" "}
              {{#if (eq entity.tableName.length 1)}}
                this {{lowercase entity.name}}
              {{else}}
                these {{entity.tableName.length}} {{lowercase entity.pluralName}}
              {{/if}}{" "}
              from our servers.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2 sm:gap-0">
            <DialogClose asChild>
              <Button variant="outline">Cancel</Button>
            </DialogClose>
            <Button
              variant="destructive"
              onClick={onDelete}
              disabled={isDeletePending}
            >
              {isDeletePending && (
                <Loader className="mr-2 size-4 animate-spin" aria-hidden="true" />
              )}
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    )
  }

  return (
    <Drawer open={open} onOpenChange={onOpenChange}>
      {showTrigger ? (
        <DrawerTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className="h-8 px-2 lg:px-3"
          >
            <Trash className="size-4" aria-hidden="true" />
            <span className="sr-only">Delete</span>
          </Button>
        </DrawerTrigger>
      ) : null}
      <DrawerContent>
        <DrawerHeader>
          <DrawerTitle>Are you absolutely sure?</DrawerTitle>
          <DrawerDescription>
            This action cannot be undone. This will permanently delete{" "}
            {{#if (eq entity.tableName.length 1)}}
              this {{lowercase entity.name}}
            {{else}}
              these {{entity.tableName.length}} {{lowercase entity.pluralName}}
            {{/if}}{" "}
            from our servers.
          </DrawerDescription>
        </DrawerHeader>
        <DrawerFooter className="gap-2 sm:space-x-0">
          <DrawerClose asChild>
            <Button variant="outline">Cancel</Button>
          </DrawerClose>
          <Button
            variant="destructive"
            onClick={onDelete}
            disabled={isDeletePending}
          >
            {isDeletePending && (
              <Loader className="mr-2 size-4 animate-spin" aria-hidden="true" />
            )}
            Delete
          </Button>
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  )
}