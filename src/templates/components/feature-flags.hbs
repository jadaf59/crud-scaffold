"use client"

import * as React from "react"
import { type DataTableConfig } from "@/config/data-table"

import { useFeatureFlags } from "./feature-flags-provider"

interface {{entity.name}}TableContextProps {
  featureFlags: DataTableConfig["featureFlags"][number]["value"][]
  setFeatureFlags: (value: DataTableConfig["featureFlags"][number]["value"][]) => void
}

const {{entity.name}}TableContext = React.createContext<{{entity.name}}TableContextProps>({
  featureFlags: [],
  setFeatureFlags: () => null,
})

interface {{entity.name}}TableProviderProps {
  children: React.ReactNode
}

export function {{entity.name}}TableProvider({
  children,
}: {{entity.name}}TableProviderProps) {
  const { featureFlags, setFeatureFlags } = useFeatureFlags()

  const contextValue = React.useMemo(
    () => ({
      featureFlags,
      setFeatureFlags,
    }),
    [featureFlags, setFeatureFlags]
  )

  return (
    <{{entity.name}}TableContext.Provider value={contextValue}>
      {children}
    </{{entity.name}}TableContext.Provider>
  )
}

export function use{{entity.name}}Table() {
  const context = React.useContext({{entity.name}}TableContext)

  if (!context) {
    throw new Error("use{{entity.name}}Table must be used within a {{entity.name}}TableProvider")
  }

  return context
}